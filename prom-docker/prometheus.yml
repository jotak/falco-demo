# my global config
global:
  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

  # Attach these labels to any time series or alerts when communicating with
  # external systems (federation, remote storage, Alertmanager).
  external_labels:
      monitor: 'codelab-monitor'

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - "first.rules"
  # - "second.rules"

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: 'falco'
    metrics_path: '/prom'
    static_configs:
      - targets: ['falco:8081']

    # Label from HTTP code family & server name (ex from vertx_http_servers_0_0_0_0:8081_responses_2xx_total)
    metric_relabel_configs:
        # Transforming vertx_http_servers_0_0_0_0:8081_responses_2xx_total ...
        # ... to vertx_http_servers_0_0_0_0:8081_responses_total{code=2xx}
      - source_labels: [__name__]
        regex: '(.*)_(\dxx)_(.*)'
        replacement: '${2}'
        target_label: code
      - source_labels: [__name__]
        regex: '(.*)_(\dxx)_(.*)'
        replacement: '${1}_${3}'
        target_label: __name__
        # Transforming vertx_http_servers_0_0_0_0:8081_responses_total{code=2xx} ...
        # ... to vertx_http_servers_responses_total{code=2xx,server=0_0_0_0:8081}
      - source_labels: [__name__]
        regex: '(.*)_http_servers_(.*:\d+)_(.*)'
        replacement: '${2}'
        target_label: server
      - source_labels: [__name__]
        regex: '(.*)_http_servers_(.*:\d+)_(.*)'
        replacement: '${1}_http_servers_${3}'
        target_label: __name__

